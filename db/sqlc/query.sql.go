// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUrl = `-- name: CreateUrl :one
WITH new_url AS (
    INSERT INTO urls (long_url, short_url, user_id, code)
    VALUES ($1, $2, $3, $4) RETURNING id
)
SELECT id FROM new_url
`

type CreateUrlParams struct {
	LongUrl  string
	ShortUrl string
	UserID   int64
	Code     string
}

func (q *Queries) CreateUrl(ctx context.Context, arg CreateUrlParams) (int64, error) {
	row := q.db.QueryRow(ctx, createUrl,
		arg.LongUrl,
		arg.ShortUrl,
		arg.UserID,
		arg.Code,
	)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (email, password) VALUES ($1, $2) RETURNING id
`

type CreateUserParams struct {
	Email    string
	Password string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (int64, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Email, arg.Password)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getClicksByUrlId = `-- name: GetClicksByUrlId :one
SELECT COUNT(*) FROM clicks WHERE url_id = $1
`

func (q *Queries) GetClicksByUrlId(ctx context.Context, urlID int64) (int64, error) {
	row := q.db.QueryRow(ctx, getClicksByUrlId, urlID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getUrlByCode = `-- name: GetUrlByCode :one
SELECT
    id,
    long_url,
    short_url,
    created_at
FROM
    urls
WHERE
    code = $1 LIMIT 1
`

type GetUrlByCodeRow struct {
	ID        int64
	LongUrl   string
	ShortUrl  string
	CreatedAt pgtype.Timestamp
}

func (q *Queries) GetUrlByCode(ctx context.Context, code string) (GetUrlByCodeRow, error) {
	row := q.db.QueryRow(ctx, getUrlByCode, code)
	var i GetUrlByCodeRow
	err := row.Scan(
		&i.ID,
		&i.LongUrl,
		&i.ShortUrl,
		&i.CreatedAt,
	)
	return i, err
}

const getUrlById = `-- name: GetUrlById :one
SELECT
    id,
    long_url,
    short_url,
    created_at
FROM
    urls
WHERE
    id = $1 LIMIT 1
`

type GetUrlByIdRow struct {
	ID        int64
	LongUrl   string
	ShortUrl  string
	CreatedAt pgtype.Timestamp
}

func (q *Queries) GetUrlById(ctx context.Context, id int64) (GetUrlByIdRow, error) {
	row := q.db.QueryRow(ctx, getUrlById, id)
	var i GetUrlByIdRow
	err := row.Scan(
		&i.ID,
		&i.LongUrl,
		&i.ShortUrl,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT
    id,
    email,
    password,
    created_at
FROM
    users
WHERE
    email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}

const getUserUrlByLongUrl = `-- name: GetUserUrlByLongUrl :one
SELECT
    id,
    long_url,
    short_url
FROM
    urls
WHERE
    long_url = $1 AND user_id = $2 LIMIT 1
`

type GetUserUrlByLongUrlParams struct {
	LongUrl string
	UserID  int64
}

type GetUserUrlByLongUrlRow struct {
	ID       int64
	LongUrl  string
	ShortUrl string
}

func (q *Queries) GetUserUrlByLongUrl(ctx context.Context, arg GetUserUrlByLongUrlParams) (GetUserUrlByLongUrlRow, error) {
	row := q.db.QueryRow(ctx, getUserUrlByLongUrl, arg.LongUrl, arg.UserID)
	var i GetUserUrlByLongUrlRow
	err := row.Scan(&i.ID, &i.LongUrl, &i.ShortUrl)
	return i, err
}

const getUserUrls = `-- name: GetUserUrls :one
SELECT
    u.id,
    u.long_url,
    u.short_url,
    u.created_at
FROM
    urls AS u
WHERE
    u.user_id = $1 LIMIT 1
`

type GetUserUrlsRow struct {
	ID        int64
	LongUrl   string
	ShortUrl  string
	CreatedAt pgtype.Timestamp
}

func (q *Queries) GetUserUrls(ctx context.Context, userID int64) (GetUserUrlsRow, error) {
	row := q.db.QueryRow(ctx, getUserUrls, userID)
	var i GetUserUrlsRow
	err := row.Scan(
		&i.ID,
		&i.LongUrl,
		&i.ShortUrl,
		&i.CreatedAt,
	)
	return i, err
}

const recordClick = `-- name: RecordClick :exec
INSERT INTO
    clicks (url_id)
VALUES
    ($1)
`

func (q *Queries) RecordClick(ctx context.Context, urlID int64) error {
	_, err := q.db.Exec(ctx, recordClick, urlID)
	return err
}

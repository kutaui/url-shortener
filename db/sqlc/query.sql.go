// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUrl = `-- name: CreateUrl :one
WITH new_url AS (
    INSERT INTO urls (long_url, short_url)
        VALUES ($1, $2)
        RETURNING id
)
INSERT INTO user_urls (user_id, url_id)
SELECT $3, id FROM new_url
RETURNING url_id
`

type CreateUrlParams struct {
	LongUrl  string
	ShortUrl string
	UserID   pgtype.Int8
}

func (q *Queries) CreateUrl(ctx context.Context, arg CreateUrlParams) (pgtype.Int8, error) {
	row := q.db.QueryRow(ctx, createUrl, arg.LongUrl, arg.ShortUrl, arg.UserID)
	var url_id pgtype.Int8
	err := row.Scan(&url_id)
	return url_id, err
}

const getUrlById = `-- name: GetUrlById :one
SELECT id, long_url, short_url, created_at
FROM urls
WHERE id = $1
`

func (q *Queries) GetUrlById(ctx context.Context, id int64) (Url, error) {
	row := q.db.QueryRow(ctx, getUrlById, id)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.LongUrl,
		&i.ShortUrl,
		&i.CreatedAt,
	)
	return i, err
}

const getUserUrlById = `-- name: GetUserUrlById :one
SELECT uu.url_id, uu.user_id
FROM user_urls AS uu
WHERE uu.url_id = $1
`

type GetUserUrlByIdRow struct {
	UrlID  pgtype.Int8
	UserID pgtype.Int8
}

func (q *Queries) GetUserUrlById(ctx context.Context, urlID pgtype.Int8) (GetUserUrlByIdRow, error) {
	row := q.db.QueryRow(ctx, getUserUrlById, urlID)
	var i GetUserUrlByIdRow
	err := row.Scan(&i.UrlID, &i.UserID)
	return i, err
}

const getUserUrlsByUser = `-- name: GetUserUrlsByUser :many
SELECT u.id, u.long_url, u.short_url, u.created_at
FROM user_urls AS uu
         JOIN urls AS u ON uu.url_id = u.id
WHERE uu.user_id = $1
`

func (q *Queries) GetUserUrlsByUser(ctx context.Context, userID pgtype.Int8) ([]Url, error) {
	rows, err := q.db.Query(ctx, getUserUrlsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Url
	for rows.Next() {
		var i Url
		if err := rows.Scan(
			&i.ID,
			&i.LongUrl,
			&i.ShortUrl,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createUrl = `-- name: CreateUrl :one
WITH new_url AS (
    INSERT INTO urls (long_url,  user_id, code)
    VALUES ($1, $2, $3) RETURNING id
)
SELECT id FROM new_url
`

type CreateUrlParams struct {
	LongUrl string
	UserID  int64
	Code    string
}

func (q *Queries) CreateUrl(ctx context.Context, arg CreateUrlParams) (int64, error) {
	row := q.db.QueryRow(ctx, createUrl, arg.LongUrl, arg.UserID, arg.Code)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (email, password) VALUES ($1, $2) RETURNING id
`

type CreateUserParams struct {
	Email    string
	Password string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (int64, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Email, arg.Password)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const deleteUrl = `-- name: DeleteUrl :exec
DELETE FROM urls WHERE id = $1
`

func (q *Queries) DeleteUrl(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteUrl, id)
	return err
}

const getClicksByUrlId = `-- name: GetClicksByUrlId :one
SELECT COUNT(*) FROM clicks WHERE url_id = $1 LIMIT 1
`

func (q *Queries) GetClicksByUrlId(ctx context.Context, urlID int64) (int64, error) {
	row := q.db.QueryRow(ctx, getClicksByUrlId, urlID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getClicksByUser = `-- name: GetClicksByUser :one
SELECT COUNT(*) FROM clicks WHERE url_id IN (SELECT id FROM urls WHERE user_id = $1)
`

func (q *Queries) GetClicksByUser(ctx context.Context, userID int64) (int64, error) {
	row := q.db.QueryRow(ctx, getClicksByUser, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getClicksByUserGroupedByDate = `-- name: GetClicksByUserGroupedByDate :many
SELECT
  DATE(clicks.created_at) AS date,
  COUNT(*)
FROM
  clicks
WHERE
  url_id IN (SELECT id FROM urls WHERE user_id = $1)
GROUP BY
  date
ORDER BY
  date ASC
`

type GetClicksByUserGroupedByDateRow struct {
	Date  pgtype.Date
	Count int64
}

func (q *Queries) GetClicksByUserGroupedByDate(ctx context.Context, userID int64) ([]GetClicksByUserGroupedByDateRow, error) {
	rows, err := q.db.Query(ctx, getClicksByUserGroupedByDate, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetClicksByUserGroupedByDateRow
	for rows.Next() {
		var i GetClicksByUserGroupedByDateRow
		if err := rows.Scan(&i.Date, &i.Count); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUrlByCode = `-- name: GetUrlByCode :one
SELECT
    id,
    long_url,
    created_at
FROM
    urls
WHERE
    code = $1 LIMIT 1
`

type GetUrlByCodeRow struct {
	ID        int64
	LongUrl   string
	CreatedAt pgtype.Timestamp
}

func (q *Queries) GetUrlByCode(ctx context.Context, code string) (GetUrlByCodeRow, error) {
	row := q.db.QueryRow(ctx, getUrlByCode, code)
	var i GetUrlByCodeRow
	err := row.Scan(&i.ID, &i.LongUrl, &i.CreatedAt)
	return i, err
}

const getUrlById = `-- name: GetUrlById :one
SELECT
    id,
    long_url,
    created_at
FROM
    urls
WHERE
    id = $1 LIMIT 1
`

type GetUrlByIdRow struct {
	ID        int64
	LongUrl   string
	CreatedAt pgtype.Timestamp
}

func (q *Queries) GetUrlById(ctx context.Context, id int64) (GetUrlByIdRow, error) {
	row := q.db.QueryRow(ctx, getUrlById, id)
	var i GetUrlByIdRow
	err := row.Scan(&i.ID, &i.LongUrl, &i.CreatedAt)
	return i, err
}

const getUrlIdByCode = `-- name: GetUrlIdByCode :one
SELECT
    id
FROM
    urls
WHERE
    code = $1 LIMIT 1
`

func (q *Queries) GetUrlIdByCode(ctx context.Context, code string) (int64, error) {
	row := q.db.QueryRow(ctx, getUrlIdByCode, code)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT
    id,
    email,
    password,
    created_at
FROM
    users
WHERE
    email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
	)
	return i, err
}

const getUserUrlByLongUrl = `-- name: GetUserUrlByLongUrl :one
SELECT
    id,
    long_url
FROM
    urls
WHERE
    long_url = $1 AND user_id = $2 LIMIT 1
`

type GetUserUrlByLongUrlParams struct {
	LongUrl string
	UserID  int64
}

type GetUserUrlByLongUrlRow struct {
	ID      int64
	LongUrl string
}

func (q *Queries) GetUserUrlByLongUrl(ctx context.Context, arg GetUserUrlByLongUrlParams) (GetUserUrlByLongUrlRow, error) {
	row := q.db.QueryRow(ctx, getUserUrlByLongUrl, arg.LongUrl, arg.UserID)
	var i GetUserUrlByLongUrlRow
	err := row.Scan(&i.ID, &i.LongUrl)
	return i, err
}

const getUserUrls = `-- name: GetUserUrls :many
SELECT
    u.id,
    u.long_url,
    u.created_at
FROM
    urls AS u
WHERE
    u.user_id = $1
`

type GetUserUrlsRow struct {
	ID        int64
	LongUrl   string
	CreatedAt pgtype.Timestamp
}

func (q *Queries) GetUserUrls(ctx context.Context, userID int64) ([]GetUserUrlsRow, error) {
	rows, err := q.db.Query(ctx, getUserUrls, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetUserUrlsRow
	for rows.Next() {
		var i GetUserUrlsRow
		if err := rows.Scan(&i.ID, &i.LongUrl, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const recordClick = `-- name: RecordClick :exec
INSERT INTO
    clicks (url_id)
VALUES
    ($1)
`

func (q *Queries) RecordClick(ctx context.Context, urlID int64) error {
	_, err := q.db.Exec(ctx, recordClick, urlID)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users SET password = $1 WHERE id = $2
`

type UpdateUserParams struct {
	Password string
	ID       int64
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser, arg.Password, arg.ID)
	return err
}
